<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.sav</groupId>
    <artifactId>ContactServiceProject</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <modules>
        <module>ContactService</module>
        <module>ContactServiceWeb</module>
    </modules>

    <properties>
        <jdk.version>1.8</jdk.version>
        <spring.version>4.0.5.RELEASE</spring.version>
        <hibernate.version>4.2.1.Final</hibernate.version>
        <hibernate-jpa.version>1.0.0.Final</hibernate-jpa.version>
        <log4j.version>1.2.16</log4j.version>
        <slf4j.version>1.6.1</slf4j.version>
        <h2database.version>1.3.160</h2database.version>
        <joda-time.version>2.3</joda-time.version>
        <jstl.version>1.2</jstl.version>
        <maxmind.geoip.version>1.2.10</maxmind.geoip.version>
        <jackson.version>1.9.10</jackson.version>
        <cglib.version>2.2.2</cglib.version>
    </properties>

    <!--1. Использование Friendship  и Hobby таблиц и реализация связей с Contact
    посредством поиска первоначально по ID. Этот подход больше классический, SQLный.
    В Hibernate ты прописал связь с помощью ManyToMany от контакта к хобби, потому мог
    напрямую использовать поиск контакта по объекту Hobby, все остальные связи по ключам
    выполнил бы сам фреймворк за тебя.-->

    <!--2. В ContactService ты и в интерфейсе и в реализации над каждым методом использовал
    аннотацию @Transactional. На самом деле использовать её лучше где-то в одном варианте,
    или в интерфейсе, или в классе-реализации, на форумах читал кучу обсуждений что лучше, на
    проектах мы обычно используем аннотацию класса. При этом ты можешь прописать
    @Transactional над самим классом и она автоматом применится ко всем методам, а если где-то
    нужно будет нечто иное, например @Transactional(readOnly = true), то уже добавляешь над
     конкретным методом.-->

    <!--3. По поводу использования Entity объектов и DTO. Лучше DTO сразу возвращать DTO из
    Dao классов, таким образом ни один метод Entity объекта не будет вызван вне сессии, в
    которой они были получены из базы, а к тому же на выходе ты уже в DTO будешь иметь всю
    необходимую тебе информацию и соответственно будут сделаны заранее все необходимые вызовы.-->

    <!--4. GET  запросы используются в основном для получения информации (исходя из названия),
    а методы по типу addContact подразумевают в себе передачу данных для охранения и рекомендуемым
    типом запроса в таком случае есть POST (или PUT, если быть совсем дотошным).-->

</project>